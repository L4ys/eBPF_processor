# IDA Python script to annotate all eBPF call instructions
# which call eBPF helpers with the helper function's name
# Developed against Python3 and IDA 7.6

# started with the instruction enumeration example from the IDA Book

from idaapi import *
import idautils
import idc

# 'manually' crafted from include/uapi/linux/bpf.h header from kernel v5.13
# will need to periodically update this as new helpers are added.
#
# run just the preprocessor (gcc -E) on the snippet defining the `bpf_func_id` enum,
# then format the names into an array, preserving order (some search/replace in vim)
# this makes the `helper_names` array, which we then use for everything else.
# It's critical the order of names is not changed from how they appear in the processed
# source, because enums assign integer values in order.

helper_names = [ "BPF_FUNC_unspec", "map_lookup_elem", "map_update_elem", "map_delete_elem", "probe_read", "ktime_get_ns", "trace_printk", "get_prandom_u32", "get_smp_processor_id", "skb_store_bytes", "l3_csum_replace", "l4_csum_replace", "tail_call", "clone_redirect", "get_current_pid_tgid", "get_current_uid_gid", "get_current_comm", "get_cgroup_classid", "skb_vlan_push", "skb_vlan_pop", "skb_get_tunnel_key", "skb_set_tunnel_key", "perf_event_read", "redirect", "get_route_realm", "perf_event_output", "skb_load_bytes", "get_stackid", "csum_diff", "skb_get_tunnel_opt", "skb_set_tunnel_opt", "skb_change_proto", "skb_change_type", "skb_under_cgroup", "get_hash_recalc", "get_current_task", "probe_write_user", "current_task_under_cgroup", "skb_change_tail", "skb_pull_data", "csum_update", "set_hash_invalid", "get_numa_node_id", "skb_change_head", "xdp_adjust_head", "probe_read_str", "get_socket_cookie", "get_socket_uid", "set_hash", "setsockopt", "skb_adjust_room", "redirect_map", "sk_redirect_map", "sock_map_update", "xdp_adjust_meta", "perf_event_read_value", "perf_prog_read_value", "getsockopt", "override_return", "sock_ops_cb_flags_set", "msg_redirect_map", "msg_apply_bytes", "msg_cork_bytes", "msg_pull_data", "bind", "xdp_adjust_tail", "skb_get_xfrm_state", "get_stack", "skb_load_bytes_relative", "fib_lookup", "sock_hash_update", "msg_redirect_hash", "sk_redirect_hash", "lwt_push_encap", "lwt_seg6_store_bytes", "lwt_seg6_adjust_srh", "lwt_seg6_action", "rc_repeat", "rc_keydown", "skb_cgroup_id", "get_current_cgroup_id", "get_local_storage", "sk_select_reuseport", "skb_ancestor_cgroup_id", "sk_lookup_tcp", "sk_lookup_udp", "sk_release", "map_push_elem", "map_pop_elem", "map_peek_elem", "msg_push_data", "msg_pop_data", "rc_pointer_rel", "spin_lock", "spin_unlock", "sk_fullsock", "tcp_sock", "skb_ecn_set_ce", "get_listener_sock", "skc_lookup_tcp", "tcp_check_syncookie", "sysctl_get_name", "sysctl_get_current_value", "sysctl_get_new_value", "sysctl_set_new_value", "strtol", "strtoul", "sk_storage_get", "sk_storage_delete", "send_signal", "tcp_gen_syncookie", "skb_output", "probe_read_user", "probe_read_kernel", "probe_read_user_str", "probe_read_kernel_str", "tcp_send_ack", "send_signal_thread", "jiffies64", "read_branch_records", "get_ns_current_pid_tgid", "xdp_output", "get_netns_cookie", "get_current_ancestor_cgroup_id", "sk_assign", "ktime_get_boot_ns", "seq_printf", "seq_write", "sk_cgroup_id", "sk_ancestor_cgroup_id", "ringbuf_output", "ringbuf_reserve", "ringbuf_submit", "ringbuf_discard", "ringbuf_query", "csum_level", "skc_to_tcp6_sock", "skc_to_tcp_sock", "skc_to_tcp_timewait_sock", "skc_to_tcp_request_sock", "skc_to_udp6_sock", "get_task_stack", "load_hdr_opt", "store_hdr_opt", "reserve_hdr_opt", "inode_storage_get", "inode_storage_delete", "d_path", "copy_from_user", "snprintf_btf", "seq_printf_btf", "skb_cgroup_classid", "redirect_neigh", "per_cpu_ptr", "this_cpu_ptr", "redirect_peer", "task_storage_get", "task_storage_delete", "get_current_task_btf", "bprm_opts_set", "ktime_get_coarse_ns", "ima_inode_hash", "sock_from_file", "check_mtu", "for_each_map_elem", "snprintf", "__BPF_FUNC_MAX_ID" ]

helper_signatures = ["BPF_FUNC_unspec", "void *bpf_map_lookup_elem(struct bpf_map *map, const void *key)", "long bpf_map_update_elem(struct bpf_map *map, const void *key, const void *value, u64 flags)", "long bpf_map_delete_elem(struct bpf_map *map, const void *key)", "long bpf_probe_read(void *dst, u32 size, const void *unsafe_ptr)", "u64 bpf_ktime_get_ns(void)", "long bpf_trace_printk(const char *fmt, u32 fmt_size, ...)", "u32 bpf_get_prandom_u32(void)", "u32 bpf_get_smp_processor_id(void)", "long bpf_skb_store_bytes(struct sk_buff *skb, u32 offset, const void *from, u32 len, u64 flags)", "long bpf_l3_csum_replace(struct sk_buff *skb, u32 offset, u64 from, u64 to, u64 size)", "long bpf_l4_csum_replace(struct sk_buff *skb, u32 offset, u64 from, u64 to, u64 flags)", "long bpf_tail_call(void *ctx, struct bpf_map *prog_array_map, u32 index)", "long bpf_clone_redirect(struct sk_buff *skb, u32 ifindex, u64 flags)", "u64 bpf_get_current_pid_tgid(void)", "u64 bpf_get_current_uid_gid(void)", "long bpf_get_current_comm(void *buf, u32 size_of_buf)", "u32 bpf_get_cgroup_classid(struct sk_buff *skb)", "long bpf_skb_vlan_push(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)", "long bpf_skb_vlan_pop(struct sk_buff *skb)", "long bpf_skb_get_tunnel_key(struct sk_buff *skb, struct bpf_tunnel_key *key, u32 size, u64 flags)", "long bpf_skb_set_tunnel_key(struct sk_buff *skb, struct bpf_tunnel_key *key, u32 size, u64 flags)", "u64 bpf_perf_event_read(struct bpf_map *map, u64 flags)", "long bpf_redirect(u32 ifindex, u64 flags)", "u32 bpf_get_route_realm(struct sk_buff *skb)", "long bpf_perf_event_output(void *ctx, struct bpf_map *map, u64 flags, void *data, u64 size)", "long bpf_skb_load_bytes(const void *skb, u32 offset, void *to, u32 len)", "long bpf_get_stackid(void *ctx, struct bpf_map *map, u64 flags)", "s64 bpf_csum_diff(__be32 *from, u32 from_size, __be32 *to, u32 to_size, __wsum seed)", "long bpf_skb_get_tunnel_opt(struct sk_buff *skb, void *opt, u32 size)", "long bpf_skb_set_tunnel_opt(struct sk_buff *skb, void *opt, u32 size)", "long bpf_skb_change_proto(struct sk_buff *skb, __be16 proto, u64 flags)", "long bpf_skb_change_type(struct sk_buff *skb, u32 type)", "long bpf_skb_under_cgroup(struct sk_buff *skb, struct bpf_map *map, u32 index)", "u32 bpf_get_hash_recalc(struct sk_buff *skb)", "u64 bpf_get_current_task(void)", "long bpf_probe_write_user(void *dst, const void *src, u32 len)", "long bpf_current_task_under_cgroup(struct bpf_map *map, u32 index)", "long bpf_skb_change_tail(struct sk_buff *skb, u32 len, u64 flags)", "long bpf_skb_pull_data(struct sk_buff *skb, u32 len)", "s64 bpf_csum_update(struct sk_buff *skb, __wsum csum)", "void bpf_set_hash_invalid(struct sk_buff *skb)", "long bpf_get_numa_node_id(void)", "long bpf_skb_change_head(struct sk_buff *skb, u32 len, u64 flags)", "long bpf_xdp_adjust_head(struct xdp_buff *xdp_md, int delta)", "long bpf_probe_read_str(void *dst, u32 size, const void *unsafe_ptr)", "u64 bpf_get_socket_cookie(struct sk_buff *skb)", "u64 bpf_get_socket_cookie(struct bpf_sock_addr *ctx)", "u64 bpf_get_socket_cookie(struct bpf_sock_ops *ctx)", "u64 bpf_get_socket_cookie(struct sock *sk)", "u32 bpf_get_socket_uid(struct sk_buff *skb)", "long bpf_set_hash(struct sk_buff *skb, u32 hash)", "long bpf_setsockopt(void *bpf_socket, int level, int optname, void *optval, int optlen)", "long bpf_skb_adjust_room(struct sk_buff *skb, s32 len_diff, u32 mode, u64 flags)", "long bpf_redirect_map(struct bpf_map *map, u32 key, u64 flags)", "long bpf_sk_redirect_map(struct sk_buff *skb, struct bpf_map *map, u32 key, u64 flags)", "long bpf_sock_map_update(struct bpf_sock_ops *skops, struct bpf_map *map, void *key, u64 flags)", "long bpf_xdp_adjust_meta(struct xdp_buff *xdp_md, int delta)", "long bpf_perf_event_read_value(struct bpf_map *map, u64 flags, struct bpf_perf_event_value *buf, u32 buf_size)", "long bpf_perf_prog_read_value(struct bpf_perf_event_data *ctx, struct bpf_perf_event_value *buf, u32 buf_size)", "long bpf_getsockopt(void *bpf_socket, int level, int optname, void *optval, int optlen)", "long bpf_override_return(struct pt_regs *regs, u64 rc)", "long bpf_sock_ops_cb_flags_set(struct bpf_sock_ops *bpf_sock, int argval)", "long bpf_msg_redirect_map(struct sk_msg_buff *msg, struct bpf_map *map, u32 key, u64 flags)", "long bpf_msg_apply_bytes(struct sk_msg_buff *msg, u32 bytes)", "long bpf_msg_cork_bytes(struct sk_msg_buff *msg, u32 bytes)", "long bpf_msg_pull_data(struct sk_msg_buff *msg, u32 start, u32 end, u64 flags)", "long bpf_bind(struct bpf_sock_addr *ctx, struct sockaddr *addr, int addr_len)", "long bpf_xdp_adjust_tail(struct xdp_buff *xdp_md, int delta)", "long bpf_skb_get_xfrm_state(struct sk_buff *skb, u32 index, struct bpf_xfrm_state *xfrm_state, u32 size, u64 flags)", "long bpf_get_stack(void *ctx, void *buf, u32 size, u64 flags)", "long bpf_skb_load_bytes_relative(const void *skb, u32 offset, void *to, u32 len, u32 start_header)", "long bpf_fib_lookup(void *ctx, struct bpf_fib_lookup *params, int plen, u32 flags)", "long bpf_sock_hash_update(struct bpf_sock_ops *skops, struct bpf_map *map, void *key, u64 flags)", "long bpf_msg_redirect_hash(struct sk_msg_buff *msg, struct bpf_map *map, void *key, u64 flags)", "long bpf_sk_redirect_hash(struct sk_buff *skb, struct bpf_map *map, void *key, u64 flags)", "long bpf_lwt_push_encap(struct sk_buff *skb, u32 type, void *hdr, u32 len)", "long bpf_lwt_seg6_store_bytes(struct sk_buff *skb, u32 offset, const void *from, u32 len)", "long bpf_lwt_seg6_adjust_srh(struct sk_buff *skb, u32 offset, s32 delta)", "long bpf_lwt_seg6_action(struct sk_buff *skb, u32 action, void *param, u32 param_len)", "long bpf_rc_repeat(void *ctx)", "long bpf_rc_keydown(void *ctx, u32 protocol, u64 scancode, u32 toggle)", "u64 bpf_skb_cgroup_id(struct sk_buff *skb)", "u64 bpf_get_current_cgroup_id(void)", "void *bpf_get_local_storage(void *map, u64 flags)", "long bpf_sk_select_reuseport(struct sk_reuseport_md *reuse, struct bpf_map *map, void *key, u64 flags)", "u64 bpf_skb_ancestor_cgroup_id(struct sk_buff *skb, int ancestor_level)", "struct bpf_sock *bpf_sk_lookup_tcp(void *ctx, struct bpf_sock_tuple *tuple, u32 tuple_size, u64 netns, u64 flags)", "struct bpf_sock *bpf_sk_lookup_udp(void *ctx, struct bpf_sock_tuple *tuple, u32 tuple_size, u64 netns, u64 flags)", "long bpf_sk_release(void *sock)", "long bpf_map_push_elem(struct bpf_map *map, const void *value, u64 flags)", "long bpf_map_pop_elem(struct bpf_map *map, void *value)", "long bpf_map_peek_elem(struct bpf_map *map, void *value)", "long bpf_msg_push_data(struct sk_msg_buff *msg, u32 start, u32 len, u64 flags)", "long bpf_msg_pop_data(struct sk_msg_buff *msg, u32 start, u32 len, u64 flags)", "long bpf_rc_pointer_rel(void *ctx, s32 rel_x, s32 rel_y)", "long bpf_spin_lock(struct bpf_spin_lock *lock)", "long bpf_spin_unlock(struct bpf_spin_lock *lock)", "struct bpf_sock *bpf_sk_fullsock(struct bpf_sock *sk)", "struct bpf_tcp_sock *bpf_tcp_sock(struct bpf_sock *sk)", "long bpf_skb_ecn_set_ce(struct sk_buff *skb)", "struct bpf_sock *bpf_get_listener_sock(struct bpf_sock *sk)", "struct bpf_sock *bpf_skc_lookup_tcp(void *ctx, struct bpf_sock_tuple *tuple, u32 tuple_size, u64 netns, u64 flags)", "long bpf_tcp_check_syncookie(void *sk, void *iph, u32 iph_len, struct tcphdr *th, u32 th_len)", "long bpf_sysctl_get_name(struct bpf_sysctl *ctx, char *buf, size_t buf_len, u64 flags)", "long bpf_sysctl_get_current_value(struct bpf_sysctl *ctx, char *buf, size_t buf_len)", "long bpf_sysctl_get_new_value(struct bpf_sysctl *ctx, char *buf, size_t buf_len)", "long bpf_sysctl_set_new_value(struct bpf_sysctl *ctx, const char *buf, size_t buf_len)", "long bpf_strtol(const char *buf, size_t buf_len, u64 flags, long *res)", "long bpf_strtoul(const char *buf, size_t buf_len, u64 flags, unsigned long *res)", "void *bpf_sk_storage_get(struct bpf_map *map, void *sk, void *value, u64 flags)", "long bpf_sk_storage_delete(struct bpf_map *map, void *sk)", "long bpf_send_signal(u32 sig)", "s64 bpf_tcp_gen_syncookie(void *sk, void *iph, u32 iph_len, struct tcphdr *th, u32 th_len)", "long bpf_skb_output(void *ctx, struct bpf_map *map, u64 flags, void *data, u64 size)", "long bpf_probe_read_user(void *dst, u32 size, const void *unsafe_ptr)", "long bpf_probe_read_kernel(void *dst, u32 size, const void *unsafe_ptr)", "long bpf_probe_read_user_str(void *dst, u32 size, const void *unsafe_ptr)", "long bpf_probe_read_kernel_str(void *dst, u32 size, const void *unsafe_ptr)", "long bpf_tcp_send_ack(void *tp, u32 rcv_nxt)", "long bpf_send_signal_thread(u32 sig)", "u64 bpf_jiffies64(void)", "long bpf_read_branch_records(struct bpf_perf_event_data *ctx, void *buf, u32 size, u64 flags)", "long bpf_get_ns_current_pid_tgid(u64 dev, u64 ino, struct bpf_pidns_info *nsdata, u32 size)", "long bpf_xdp_output(void *ctx, struct bpf_map *map, u64 flags, void *data, u64 size)", "u64 bpf_get_netns_cookie(void *ctx)", "u64 bpf_get_current_ancestor_cgroup_id(int ancestor_level)", "long bpf_sk_assign(struct sk_buff *skb, void *sk, u64 flags)", "long bpf_sk_assign(struct bpf_sk_lookup *ctx, struct bpf_sock *sk, u64 flags)", "u64 bpf_ktime_get_boot_ns(void)", "long bpf_seq_printf(struct seq_file *m, const char *fmt, u32 fmt_size, const void *data, u32 data_len)", "long bpf_seq_write(struct seq_file *m, const void *data, u32 len)", "u64 bpf_sk_cgroup_id(void *sk)", "u64 bpf_sk_ancestor_cgroup_id(void *sk, int ancestor_level)", "long bpf_ringbuf_output(void *ringbuf, void *data, u64 size, u64 flags)", "void *bpf_ringbuf_reserve(void *ringbuf, u64 size, u64 flags)", "void bpf_ringbuf_submit(void *data, u64 flags)", "void bpf_ringbuf_discard(void *data, u64 flags)", "u64 bpf_ringbuf_query(void *ringbuf, u64 flags)", "long bpf_csum_level(struct sk_buff *skb, u64 level)", "struct tcp6_sock *bpf_skc_to_tcp6_sock(void *sk)", "struct tcp_sock *bpf_skc_to_tcp_sock(void *sk)", "struct tcp_timewait_sock *bpf_skc_to_tcp_timewait_sock(void *sk)", "struct tcp_request_sock *bpf_skc_to_tcp_request_sock(void *sk)", "struct udp6_sock *bpf_skc_to_udp6_sock(void *sk)", "long bpf_get_task_stack(struct task_struct *task, void *buf, u32 size, u64 flags)", "long bpf_load_hdr_opt(struct bpf_sock_ops *skops, void *searchby_res, u32 len, u64 flags)", "long bpf_store_hdr_opt(struct bpf_sock_ops *skops, const void *from, u32 len, u64 flags)", "long bpf_reserve_hdr_opt(struct bpf_sock_ops *skops, u32 len, u64 flags)", "void *bpf_inode_storage_get(struct bpf_map *map, void *inode, void *value, u64 flags)", "int bpf_inode_storage_delete(struct bpf_map *map, void *inode)", "long bpf_d_path(struct path *path, char *buf, u32 sz)", "long bpf_copy_from_user(void *dst, u32 size, const void *user_ptr)", "long bpf_snprintf_btf(char *str, u32 str_size, struct btf_ptr *ptr, u32 btf_ptr_size, u64 flags)", "long bpf_seq_printf_btf(struct seq_file *m, struct btf_ptr *ptr, u32 ptr_size, u64 flags)", "u64 bpf_skb_cgroup_classid(struct sk_buff *skb)", "long bpf_redirect_neigh(u32 ifindex, struct bpf_redir_neigh *params, int plen, u64 flags)", "void *bpf_per_cpu_ptr(const void *percpu_ptr, u32 cpu)", "void *bpf_this_cpu_ptr(const void *percpu_ptr)", "long bpf_redirect_peer(u32 ifindex, u64 flags)", "void *bpf_task_storage_get(struct bpf_map *map, struct task_struct *task, void *value, u64 flags)", "long bpf_task_storage_delete(struct bpf_map *map, struct task_struct *task)", "struct task_struct *bpf_get_current_task_btf(void)", "long bpf_bprm_opts_set(struct linux_binprm *bprm, u64 flags)", "u64 bpf_ktime_get_coarse_ns(void)", "long bpf_ima_inode_hash(struct inode *inode, void *dst, u32 size)", "struct socket *bpf_sock_from_file(struct file *file)", "long bpf_check_mtu(void *ctx, u32 ifindex, u32 *mtu_len, s32 len_diff, u64 flags)", "long bpf_for_each_map_elem(struct bpf_map *map, void *callback_fn, void *callback_ctx, u64 flags)", "long bpf_snprintf(char *str, u32 str_size, const char *fmt, u64 *data, u32 data_len)", "BPF_FUNC_MAX_ID" ]

helper_id_to_name = {i: helper_names[i] for i in range(len(helper_names))}

helper_id_to_signature = {i: helper_signatures[i] for i in range(len(helper_signatures))}

def dump_helpers():
    print("bpf helpers id -> name")
    for k, v in helper_id_to_name.items():
        print(f"{k} -> {v}")

def lookup_helper_name(helper_id: int) -> str :
    return helper_id_to_name[helper_id]

def lookup_helper_signature(helper_id: int) -> str :
    return helper_id_to_signature[helper_id]

print("Scanning all known function instructions for eBPF helper call instructions")
for ea in Functions():
    func = get_func(ea)
    func_name = ida_funcs.get_func_name(func.start_ea)
    print(f"scanning function: {func_name}")
    if func:
        for i in FuncItems(func.start_ea):
            insn = ida_ua.insn_t()
            if ida_ua.decode_insn(insn, i):
                feature = insn.get_canon_feature()
                if feature & CF_CALL:
                    # TODO: check that we're a helper call, not a bpf tail call
                    try:
                        helper_name = lookup_helper_name(insn[0].value)
                        helper_signature = lookup_helper_signature(insn[0].value)
                    except KeyError:
                        helper_name = "UNKONWN. Update list of helpers"
                        helper_signature = "UNKNOWN. Update list of helper function signatures"
                        Warning(f"Unknown eBPF helper {insn[0].value:#x}. You need to update the processor's list of helper functions using a newer Linux kernel source (include/uapi/linux/bpf.h).")

                    print(f"\tcall detected: {i:#8x} -> {helper_name}")
                    #idc.set_cmt(i, helper_name, False)
                    idc.set_cmt(i, helper_signature, False)
